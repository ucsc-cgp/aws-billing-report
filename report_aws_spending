#!/usr/bin/perl
# Written by Erich Weiler
# Report on BD2K AWS spending and email report

use strict;
use lib '/usr/lib64/perl5/lib/perl5';
use warnings;
use Amazon::S3;
use Text::CSV;
use DBI;

chdir('/root/aws-reporting');

our (%ec2_tally,$data_tally,$s3_tally,$sum,$support_dev_tally,$route53_tally);
our ($datapipeline_tally,$awskms_tally,$ec2_total,$simpledb_tally,$registrar_tally);
our ($cloudtrail_tally, $cloudwatch_tally, $queueservice_tally, $notification_tally);
our ($lambda_tally,$registrar_diff,$cloudfront_tally,$guardduty_tally,$awsconfig_tally);
our ($costexplorer_tally,$support_bus_tally,$xray_tally,$cloudfront_diff,$guardduty_diff);
our ($awsconfig_diff,$costexplorer_diff,$support_bus_diff,$xray_diff,$unknown_tally,$unknown_diff);
our ($awsglue_tally, $awsglue_diff);

our ($amazonapigateway_tally,$amazondynamodb_tally,$amazoneks_tally,$amazones_tally);
our ($amazonrds_tally,$amazonstates_tally,$amazonvpc_tally,$awssecretsmanager_tally);
our ($amazonapigateway_diff,$amazondynamodb_diff,$amazoneks_diff,$amazones_diff);
our ($amazonrds_diff,$amazonstates_diff,$amazonvpc_diff,$awssecretsmanager_diff);


our ($data_diff,$s3_diff,$support_diff,$route53_diff,$datapipeline_diff,$awskms_diff);
our ($simpledb_diff,$cloudwatch_diff,$cloudtrail_diff,$queueservice_diff,$notification_diff);
our (%ec2_mapping,$one_up);
our (%aws_accounts,%project_spending,$data_detailed,$grand_diff,$lambda_diff,$ec2_diff);
our ($all_total, %totals);


# Initialize AWS Accounts and Account Numbers

my $accounts_csv = Text::CSV->new({ sep_char => ',' });
open(my $accounts, '<', 'accounts.csv') or die $!;
while (my $line = <$accounts>) {
	chomp $line;
	if ($accounts_csv->parse($line)) {
		my @fields = $accounts_csv->fields();
		$aws_accounts{"$fields[0]"} = $fields[1];
	} else {
		die "could not parse \"$line\" in accounts.csv";
	}
}

# The following account bills against an internal AWS account for the
# Free Public Dataset promotion


my $csv = Text::CSV->new({ sep_char => ',' });

# Initialize date variables

chomp(my $current_day = `/usr/bin/date +\"\%B \%d, \%Y\"`);
chomp(my $first_day = `/usr/bin/date +\"\%B 01, \%Y\"`);
chomp(my $s3_file_date = `/usr/bin/date +\"\%Y-\%m.csv\"`);
chomp(my $local_file_date = `/usr/bin/date +\"\%Y-\%m-\%d.csv\"`);
chomp(my $today_mysqlformat = `/usr/bin/date +\"%Y-\%m-\%d\"`);
chomp(my $yesterday_mysqlformat = `/usr/bin/date +\"%Y-\%m-\%d\" --date=\"-1 day\"`);
chomp(my $day = `/usr/bin/date +\"%d\"`);

# Initialize S3 creds

my $access_key = 'ADD_ACCESS_KEY_HERE';
my $secret_key = 'ADD_SECRET_KEY_HERE';

my $conn = Amazon::S3->new({
	aws_access_key_id	=> $access_key,
	aws_secret_access_key	=> $secret_key,
	secure			=> 1,
	retry			=> 1,
});

my $s3_file = "862902209576-aws-cost-allocation-$s3_file_date";
my $local_file = "/root/aws-reporting/862902209576-aws-cost-allocation-$local_file_date";
my $s3_detailed_file = "862902209576-aws-billing-detailed-line-items-with-resources-and-tags-$s3_file_date.zip";
my $local_detailed_file = "/root/aws-reporting/862902209576-aws-billing-detailed-line-items-with-resources-and-tags-$local_file_date.zip";
my $local_detailed_file_unzipped = "/root/aws-reporting/862902209576-aws-billing-detailed-line-items-with-resources-and-tags-$s3_file_date";
my $tmpfile = "/root/aws-reporting/tmpfile";
# TODO: Data removed
my $bucket = $conn->bucket("BUCKET_NAME_HERE");

# Get the latest AWS report files (summary and detailed) from our bucket
# Also, unzip the detailed file

$bucket->get_key_filename("$s3_file", undef,
	"$local_file");

$bucket->get_key_filename("$s3_detailed_file", undef,
	"$local_detailed_file");

system("/usr/bin/unzip -o -qq $local_detailed_file");

# Initialize database connection stuff

# TODO: Data removed
my $host = "localhost";
my $database = "Cool database name";
my $mysqluser = "Cool Username";
my $pw = 'Cool Password';

# Open MAIL temporary file to populate with email data

open(MAIL, '>', "/tmp/mailtemp.txt");

# Define some functions to be used later

sub owner_search {

	seek $data_detailed, 0, 0;
	while (my $line_detailed = <$data_detailed>) {
		chomp $line_detailed;
		if ($csv->parse($line_detailed)) {
			my @fields_detailed = $csv->fields();
			if ($_[0] eq $fields_detailed[21]) {
				if (!($fields_detailed[25])) {
					$one_up = "untagged";
					return $one_up;
					last;
				} else {
					$one_up = "$fields_detailed[25]";
					return $one_up;
					last;
				}
			}

		}
	}
}

sub print_diff {
	if ($_[0] > 0) {
		$_[0] = sprintf("%.2f", $_[0]);
		print MAIL ": up \$$_[0] from yesterday\n";
	} elsif ($_[0] < 0) {
		my $absolute = abs($_[0]);
		$absolute = sprintf("%.2f", $absolute);
		print MAIL ": down \$$absolute from yesterday\n";
	} else {
		print MAIL ": same as yesterday\n";
	}
}


# Initialize database connection

my $connect = DBI->connect("DBI:mysql:database=$database;host=$host", "$mysqluser", "$pw", {'RaiseError' => 1});

########## START ACCOUNT LOOP THROUGH HASH %aws_accounts

keys %aws_accounts;
foreach my $k (sort keys %aws_accounts) {
my $v = $aws_accounts{$k};

# Initialize all tallies to 0.00

$sum = 0.00;
$data_tally = 0.00;
$s3_tally = 0.00;
$support_dev_tally = 0.00;
$route53_tally = 0.00;
$datapipeline_tally = 0.00;
$awskms_tally = 0.00;
$simpledb_tally = 0.00;
$cloudwatch_tally = 0.00;
$cloudtrail_tally = 0.00;
$queueservice_tally = 0.00;
$notification_tally = 0.00;
$lambda_tally = 0.00;
$registrar_tally = 0.00;
$amazonapigateway_tally = 0.00;
$amazondynamodb_tally = 0.00;
$amazoneks_tally = 0.00;
$amazones_tally = 0.00;
$amazonrds_tally = 0.00;
$amazonstates_tally = 0.00;
$amazonvpc_tally = 0.00;
$awssecretsmanager_tally = 0.00;
$cloudfront_tally = 0.00;
$guardduty_tally = 0.00;
$awsconfig_tally = 0.00;
$costexplorer_tally = 0.00;
$support_bus_tally = 0.00;
$xray_tally = 0.00;
$awsglue_tally = 0.00;
$unknown_tally = 0.00;

$data_diff = 0.00;
$s3_diff = 0.00;
$support_diff = 0.00;
$route53_diff = 0.00;
$datapipeline_diff = 0.00;
$awskms_diff = 0.00;
$simpledb_diff = 0.00;
$cloudwatch_diff = 0.00;
$cloudtrail_diff = 0.00;
$queueservice_diff = 0.00;
$notification_diff = 0.00;
$lambda_diff = 0.00;
$registrar_diff = 0.00;
$grand_diff = 0.00;
$lambda_diff = 0.00;
$ec2_diff = 0.00;
$amazonapigateway_diff = 0.00;
$amazondynamodb_diff = 0.00;
$amazoneks_diff = 0.00;
$amazones_diff = 0.00;
$amazonrds_diff = 0.00;
$amazonstates_diff = 0.00;
$amazonvpc_diff = 0.00;
$awssecretsmanager_diff = 0.00;
$cloudfront_diff = 0.00;
$guardduty_diff = 0.00;
$awsconfig_diff = 0.00;
$costexplorer_diff = 0.00;
$support_bus_diff = 0.00;
$xray_diff = 0.00;
$awsglue_diff = 0.00;
$unknown_diff = 0.00;

$ec2_total = 0.00;
undef %ec2_tally;

$ec2_tally{'untagged'} = 0.00;

# Open the detailed file for recursive owner searching and set up searching function
# This also reduces the file size of the detailed file by 90%, making the program
# work way faster.

open($data_detailed, '<', $local_detailed_file_unzipped) or die "Could not open '$local_detailed_file_unzipped' $!\n";

open(my $smallfile, '>', $tmpfile) or die "Could not open '$tmpfile' $!\n";

while (my $line_detailed = <$data_detailed>) {
	my @line_elements = split /,/, $line_detailed;

	if (($line_detailed =~ /RunInstances/) && ($line_elements[2] eq "\"$v\"")) {
		print $smallfile "$line_detailed";
	}
}

close($data_detailed);
close($smallfile);

open($data_detailed, '<', $tmpfile) or die "Could not open '$tmpfile' $!\n";

# Open the CSV file and iterate through each line to grab all the data

open(my $data, '<', $local_file) or die "Could not open '$local_file' $!\n";
while (my $line = <$data>) {
	chomp $line;

	if ($csv->parse($line)) {

		my @fields = $csv->fields();

		# Exclude the first couple and the last couple lines of the file

		if (($fields[0] =~ /see your/) || ($fields[0] =~ /InvoiceID/) || ($fields[0] eq "")) {
			next;
		}

		# Exclude the Invoice Cost Summary

		if ($fields[19] =~ /Total amount for invoice Estimated/) {
			next;
		}

		# Exclude line items with no or very minimal cost

		if (($fields[29] < 0.001) && ($fields[29] > 0)) {
			 next;
		}

		if ($fields[29] == 0) {
			 next;
		}

		# Exclude lines that are not associated with this account

		if ($fields[2] ne "$v") {
			 next;
		}

		# Round dollar amount to two decimal places

		$fields[29] = sprintf("%.2f", $fields[29]);

		# Add up total money

		if ($fields[12] =~ /AmazonS3/) {
			$s3_tally += $fields[29];
		} elsif ($fields[12] =~ /AWSCloudTrail/) {
			$cloudtrail_tally += $fields[29];
		} elsif ($fields[12] =~ /AmazonCloudWatch/) {
			$cloudwatch_tally += $fields[29];
		} elsif ($fields[12] =~ /AmazonSNS/) {
			$notification_tally += $fields[29];
		} elsif ($fields[12] =~ /AWSLambda/) {
			$lambda_tally += $fields[29];
		} elsif ($fields[12] =~ /AWSQueueService/) {
			$queueservice_tally += $fields[29];
		} elsif ($fields[12] =~ /AWSDataTransfer/) {
			$data_tally += $fields[29];
		} elsif ($fields[12] =~ /AWSDeveloperSupport/) {
			$support_dev_tally += $fields[29];
		} elsif ($fields[12] =~ /AmazonRoute53/) {
			$route53_tally += $fields[29];
		} elsif ($fields[12] =~ /datapipeline/) {
			$datapipeline_tally += $fields[29];
		} elsif ($fields[12] =~ /awskms/) {
			$awskms_tally += $fields[29];
		} elsif ($fields[12] =~ /AmazonSimpleDB/) {
			$simpledb_tally += $fields[29];
		} elsif ($fields[12] =~ /AmazonRegistrar/) {
			$registrar_tally += $fields[29];
		} elsif ($fields[12] =~ /AmazonApiGateway/) {
			$amazonapigateway_tally += $fields[29];
		} elsif ($fields[12] =~ /AmazonDynamoDB/) {
			$amazondynamodb_tally += $fields[29];
		} elsif ($fields[12] =~ /AmazonEKS/) {
			$amazoneks_tally += $fields[29];
		} elsif ($fields[12] =~ /AmazonES/) {
			$amazones_tally += $fields[29];
		} elsif ($fields[12] =~ /AmazonRDS/) {
			$amazonrds_tally += $fields[29];
		} elsif ($fields[12] =~ /AmazonStates/) {
			$amazonstates_tally += $fields[29];
		} elsif ($fields[12] =~ /AmazonVPC/) {
			$amazonvpc_tally += $fields[29];
		} elsif ($fields[12] =~ /AWSSecretsManager/) {
			$awssecretsmanager_tally += $fields[29];
		} elsif ($fields[12] =~ /AmazonCloudFront/) {
			$cloudfront_tally += $fields[29];
		} elsif ($fields[12] =~ /AmazonGuardDuty/) {
			$guardduty_tally += $fields[29];
		} elsif ($fields[12] =~ /AWSConfig/) {
			$awsconfig_tally += $fields[29];
		} elsif ($fields[12] =~ /AWSCostExplorer/) {
			$costexplorer_tally += $fields[29];
		} elsif ($fields[12] =~ /AWSSupportBusiness/) {
			$support_bus_tally += $fields[29];
		} elsif ($fields[12] =~ /AWSXRay/) {
			$xray_tally += $fields[29];
		} elsif ($fields[12] =~ /AWSGlue/) {
			$awsglue_tally += $fields[29];
		} elsif ($fields[12] =~ /AmazonEC2/) {
#			print "Searching for owner of new EC2 line item...\n";
			if (!($fields[32] =~ /[a-zA-Z]/)) {
#				print "Found Original Owner \= untagged : for cost \$$fields[29]\n\n";
				$ec2_tally{'untagged'} += $fields[29];

			} elsif ($fields[32] =~ /^i\-/) {

				my $search = $fields[32];

				while (1) {
					 if ($search =~ /^i\-/) {
						if ($ec2_mapping{$search}) {
#							print "BANG1 \t$search is owned by $ec2_mapping{$search}\n";
							$search = $ec2_mapping{$search};
						} else {
							my $found = owner_search($search);
							if ($found eq "") {
								$found = "EBS_Volumes_Without_Owner";
							}
#							print "BANG2 \t$search is owned by $found\n";
							$ec2_mapping{$search} = "$found";
							$search = "$found";
						}
					} else {
						$fields[32] = $search;
						last;
					}
				}

				if (!($ec2_tally{$fields[32]})) {
#					print "BANG3 Found Original Owner \= $fields[32] : for cost \$$fields[29]\n\n";
					$ec2_tally{$fields[32]} = $fields[29];
				} else {
#					print "BANG4 Found Original Owner \= $fields[32] : for cost \$$fields[29]\n\n";
					$ec2_tally{$fields[32]} += $fields[29];
				}

			} elsif (!($ec2_tally{$fields[32]})) {
#				print "BANG5 Found Original Owner \= $fields[32] : for cost \$$fields[29]\n\n";
				if (!($fields[32] =~ /[a-zA-Z]/)) {
#					print "Found Original Owner \= untagged : for cost \$$fields[29]\n\n";
					$ec2_tally{'untagged'} += $fields[29];
				} else {
					$ec2_tally{$fields[32]} = $fields[29];
				}
			} else {
#				print "BANG6 Found Original Owner \= $fields[32] : for cost \$$fields[29]\n\n";
				$ec2_tally{$fields[32]} += $fields[29];
			}
		} else {
			# We haven't seen the service before, flag as unknown and tally unknown costs
#			print "Found unknown service!: $fields[12]\n";
			$unknown_tally += $fields[29];
		}

		$sum += $fields[29];

	} else {

	warn "Line could not be parsed: $line\n";

	}
}

# Close the summary file and the detailed file handles

close($data);
close($data_detailed);

# Convert all dollar values in the %ec2_tally hash to go out to two decimals
# We don't care about fractions of a cent
# Then add up all the amounts to get the total for EC2 usage

foreach my $val (keys %ec2_tally) {
	$ec2_tally{$val} = sprintf("%.2f", $ec2_tally{$val});
	$ec2_total += $ec2_tally{$val};
}

# Normalize the numbers in the tallies to two decimal places

$data_tally = sprintf("%.2f", $data_tally);
$s3_tally = sprintf("%.2f", $s3_tally);
$support_dev_tally = sprintf("%.2f", $support_dev_tally);
$route53_tally = sprintf("%.2f", $route53_tally);
$datapipeline_tally = sprintf("%.2f", $datapipeline_tally);
$awskms_tally = sprintf("%.2f", $awskms_tally);
$simpledb_tally = sprintf("%.2f", $simpledb_tally);
$lambda_tally = sprintf("%.2f", $lambda_tally);
$registrar_tally = sprintf("%.2f", $registrar_tally);
$cloudtrail_tally = sprintf("%.2f", $cloudtrail_tally);
$cloudwatch_tally = sprintf("%.2f", $cloudwatch_tally);
$queueservice_tally = sprintf("%.2f", $queueservice_tally);
$notification_tally = sprintf("%.2f", $notification_tally);
$amazonapigateway_tally = sprintf("%.2f", $amazonapigateway_tally);
$amazondynamodb_tally = sprintf("%.2f", $amazondynamodb_tally);
$amazoneks_tally = sprintf("%.2f", $amazoneks_tally);
$amazones_tally = sprintf("%.2f", $amazones_tally);
$amazonrds_tally = sprintf("%.2f", $amazonrds_tally);
$amazonstates_tally = sprintf("%.2f", $amazonstates_tally);
$amazonvpc_tally = sprintf("%.2f", $amazonvpc_tally);
$awssecretsmanager_tally = sprintf("%.2f", $awssecretsmanager_tally);
$cloudfront_tally = sprintf("%.2f", $cloudfront_tally);
$guardduty_tally = sprintf("%.2f", $guardduty_tally);
$awsconfig_tally = sprintf("%.2f", $awsconfig_tally);
$costexplorer_tally = sprintf("%.2f", $costexplorer_tally);
$support_bus_tally = sprintf("%.2f", $support_bus_tally);
$xray_tally = sprintf("%.2f", $xray_tally);
$awsglue_tally = sprintf("%.2f", $awsglue_tally);
$unknown_tally = sprintf("%.2f", $unknown_tally);


$sum = sprintf("%.2f", $sum);

# Grab yesterday's values from the database to compare with today's values

my $grab = $connect->prepare("SELECT * FROM \`$k\` WHERE report_date = \"$yesterday_mysqlformat\"");
$grab->execute() or print "\nCouldn't execute statement: " . $grab->errstr . "\n";

if ($grab->rows > 0) {
	while (my @data = $grab->fetchrow_array()) {
		$data_diff = ($data_tally - $data[1]);
		$s3_diff = ($s3_tally - $data[2]);
		$support_diff = ($support_dev_tally - $data[3]);
		$route53_diff = ($route53_tally - $data[4]);
		$datapipeline_diff = ($datapipeline_tally - $data[5]);
		$awskms_diff = ($awskms_tally - $data[6]);
		$simpledb_diff = ($simpledb_tally - $data[7]);
		$cloudwatch_diff = ($cloudwatch_tally - $data[8]);
		$cloudtrail_diff = ($cloudtrail_tally - $data[9]);
		$queueservice_diff = ($queueservice_tally - $data[10]);
		$notification_diff = ($notification_tally - $data[11]);
		$lambda_diff = ($lambda_tally - $data[12]);
		$registrar_diff = ($registrar_tally - $data[13]);
		$ec2_diff = ($ec2_total - $data[14]);

		$amazonapigateway_diff = ($amazonapigateway_tally - $data[15]);
		$amazondynamodb_diff = ($amazondynamodb_tally - $data[16]);
		$amazoneks_diff = ($amazoneks_tally - $data[17]);
		$amazones_diff = ($amazones_tally - $data[18]);
		$amazonrds_diff = ($amazonrds_tally - $data[19]);
		$amazonstates_diff = ($amazonstates_tally - $data[20]);
		$amazonvpc_diff = ($amazonvpc_tally - $data[21]);
		$awssecretsmanager_diff = ($awssecretsmanager_tally - $data[22]);

		$cloudfront_diff = ($cloudfront_tally - $data[23]);
		$guardduty_diff = ($guardduty_tally - $data[24]);
		$awsconfig_diff = ($awsconfig_tally - $data[25]);
		$costexplorer_diff = ($costexplorer_tally - $data[26]);
		$support_bus_diff = ($support_bus_tally - $data[27]);
		$xray_diff = ($xray_tally - $data[28]);
		$awsglue_diff = ($awsglue_tally - $data[29]);

		$unknown_diff = ($unknown_tally - $data[30]);

		$grand_diff = ($sum - $data[31]);
	}
}

print MAIL "-------------------------------------------------------------------\n";
print MAIL "***** REPORT FOR ACCOUNT \"$k\":\n";
print MAIL "-------------------------------------------------------------------\n\n";

if (($day eq "01") || ($grab->rows == 0)) {

	if ($day eq "01") {
		print MAIL "Amazon Web Services Report for $first_day\n";
		print MAIL "Being the first of the month, all tallies are reset\!\n\n";
	} elsif ($grab->rows == 0) {
		print MAIL "Amazon Web Services Report from $first_day - $current_day\n";
		print MAIL "\*\*\* NOTICE: Unable to grab yesterday\'s tallies for comparison\n";
		print MAIL "from the database, only today\'s tallies are shown below.\n\n";
	}


	print MAIL "EC2 Breakdown by Owner:\n";

	for (keys %ec2_tally) {
		printf MAIL ("\t%-35s", "\* $_");
		printf MAIL ("%-13s\n", "\= \$$ec2_tally{$_}");
	}

	printf MAIL ("\n%-35s", "TOTAL FOR EC2");
	$ec2_total = sprintf("%.2f", $ec2_total);
	printf MAIL ("%-13s\n\n", "\= \$$ec2_total");

	printf MAIL ("%-42s", "Data Transfer Total");
	printf MAIL ("%-13s\n", "\= \$$data_tally");
	printf MAIL ("%-42s", "S3 Storage Total");
	printf MAIL ("%-13s\n", "\= \$$s3_tally");
	printf MAIL ("%-42s", "AWS Developer Support Total");
	printf MAIL ("%-13s\n", "\= \$$support_dev_tally");
	printf MAIL ("%-42s", "Amazon Route 53 Total");
	printf MAIL ("%-13s\n", "\= \$$route53_tally");
	printf MAIL ("%-42s", "Amazon Registrar Total");
	printf MAIL ("%-13s\n", "\= \$$registrar_tally");
	printf MAIL ("%-42s", "Amazon Data Pipeline Total");
	printf MAIL ("%-13s\n", "\= \$$datapipeline_tally");
	printf MAIL ("%-42s", "AWS Key Management Services Total");
	printf MAIL ("%-13s\n", "\= \$$awskms_tally");
	printf MAIL ("%-42s", "Amazon SimpleDB Total");
	printf MAIL ("%-13s\n", "\= \$$simpledb_tally");
	printf MAIL ("%-42s", "Amazon Lambda Service Total");
	printf MAIL ("%-13s\n", "\= \$$lambda_tally");
	printf MAIL ("%-42s", "Amazon CloudTrail Service Total");
	printf MAIL ("%-13s\n", "\= \$$cloudtrail_tally");
	printf MAIL ("%-42s", "Amazon CloudWatch Service Total");
	printf MAIL ("%-13s\n", "\= \$$cloudwatch_tally");
	printf MAIL ("%-42s", "Amazon Simple Queue Service Total");
	printf MAIL ("%-13s\n", "\= \$$queueservice_tally");
	printf MAIL ("%-42s", "Amazon Notification Service Total");
	printf MAIL ("%-13s\n", "\= \$$notification_tally");
	printf MAIL ("%-42s", "Amazon API Gateway Service Total");
	printf MAIL ("%-13s\n", "\= \$$amazonapigateway_tally");
	printf MAIL ("%-42s", "Amazon DynamoDB Service Total");
	printf MAIL ("%-13s\n", "\= \$$amazondynamodb_tally");
	printf MAIL ("%-42s", "Amazon Containers for Kubernetes Total");
	printf MAIL ("%-13s\n", "\= \$$amazoneks_tally");
	printf MAIL ("%-42s", "Amazon Elasticsearch Service Total");
	printf MAIL ("%-13s\n", "\= \$$amazones_tally");
	printf MAIL ("%-42s", "Amazon Relational Database Service Total");
	printf MAIL ("%-13s\n", "\= \$$amazonrds_tally");
	printf MAIL ("%-42s", "Amazon Step Functions Service Total");
	printf MAIL ("%-13s\n", "\= \$$amazonstates_tally");
	printf MAIL ("%-42s", "Amazon Virtual Private Cloud Service Total");
	printf MAIL ("%-13s\n", "\= \$$amazonvpc_tally");
	printf MAIL ("%-42s", "Amazon Secrets Manager Service Total");
	printf MAIL ("%-13s\n", "\= \$$awssecretsmanager_tally");
	printf MAIL ("%-42s", "Amazon Cloud Front Total");
	printf MAIL ("%-13s\n", "\= \$$cloudfront_tally");
	printf MAIL ("%-42s", "Amazon Guard Duty Total");
	printf MAIL ("%-13s\n", "\= \$$guardduty_tally");
	printf MAIL ("%-42s", "Amazon Config Service Total");
	printf MAIL ("%-13s\n", "\= \$$awsconfig_tally");
	printf MAIL ("%-42s", "Amazon Cost Explorer Service Total");
	printf MAIL ("%-13s\n", "\= \$$costexplorer_tally");
	printf MAIL ("%-42s", "Amazon Business Support Total");
	printf MAIL ("%-13s\n", "\= \$$support_bus_tally");
	printf MAIL ("%-42s", "Amazon X-Ray Service Total");
	printf MAIL ("%-13s\n", "\= \$$xray_tally");
	printf MAIL ("%-42s", "Amazon Glue Service Total");
	printf MAIL ("%-13s\n", "\= \$$awsglue_tally");
	printf MAIL ("%-42s", "Unknown Services Total");
	printf MAIL ("%-13s\n", "\= \$$unknown_tally");

	print MAIL "\n";

	printf MAIL ("%-35s", "GRAND TOTAL");
	printf MAIL ("%-13s\n", "\= \$$sum");

} else {

	print MAIL "Amazon Web Services Report from $first_day - $current_day\n";

	print MAIL "\nEC2 Breakdown by Owner:\n";

	for (keys %ec2_tally) {
		printf MAIL ("\t%-35s", "\* $_");
		printf MAIL ("%-13s\n", "\= \$$ec2_tally{$_}");
	}

	printf MAIL ("\n%-35s", "TOTAL FOR EC2");
	$ec2_total = sprintf("%.2f", $ec2_total);
	printf MAIL ("%-13s", "\= \$$ec2_total");
	print_diff($ec2_diff);
	print MAIL "\n";

	printf MAIL ("%-35s", "Data Transfer Total");
	printf MAIL ("%-13s", "\= \$$data_tally");
	print_diff($data_diff);

	printf MAIL ("%-35s", "S3 Storage Total");
	printf MAIL ("%-13s", "\= \$$s3_tally");
	print_diff($s3_diff);

	printf MAIL ("%-35s", "AWS Developer Support Total");
	printf MAIL ("%-13s", "\= \$$support_dev_tally");
	print_diff($support_diff);

	printf MAIL ("%-35s", "Amazon Route 53 Total");
	printf MAIL ("%-13s", "\= \$$route53_tally");
	print_diff($route53_diff);

	printf MAIL ("%-35s", "Amazon Registrar Total");
	printf MAIL ("%-13s", "\= \$$registrar_tally");
	print_diff($registrar_diff);

	printf MAIL ("%-35s", "Amazon Data Pipeline Total");
	printf MAIL ("%-13s", "\= \$$datapipeline_tally");
	print_diff($datapipeline_diff);

	printf MAIL ("%-35s", "AWS Key Management Services Total");
	printf MAIL ("%-13s", "\= \$$awskms_tally");
	print_diff($awskms_diff);

	printf MAIL ("%-35s", "Amazon SimpleDB Total");
	printf MAIL ("%-13s", "\= \$$simpledb_tally");
	print_diff($simpledb_diff);

	printf MAIL ("%-35s", "Amazon Lambda Service Total");
	printf MAIL ("%-13s", "\= \$$lambda_tally");
	print_diff($lambda_diff);

	printf MAIL ("%-35s", "Amazon CloudTrail Service Total");
	printf MAIL ("%-13s", "\= \$$cloudtrail_tally");
	print_diff($cloudtrail_diff);

	printf MAIL ("%-35s", "Amazon CloudWatch Service Total");
	printf MAIL ("%-13s", "\= \$$cloudwatch_tally");
	print_diff($cloudwatch_diff);

	printf MAIL ("%-35s", "Amazon Simple Queue Service Total");
	printf MAIL ("%-13s", "\= \$$queueservice_tally");
	print_diff($queueservice_diff);

	printf MAIL ("%-35s", "Amazon Notification Service Total");
	printf MAIL ("%-13s", "\= \$$notification_tally");
	print_diff($notification_diff);

	printf MAIL ("%-35s", "Amazon API Gateway Service Total");
	printf MAIL ("%-13s", "\= \$$amazonapigateway_tally");
	print_diff($amazonapigateway_diff);

	printf MAIL ("%-35s", "Amazon DynamoDB Service Total");
	printf MAIL ("%-13s", "\= \$$amazondynamodb_tally");
	print_diff($amazondynamodb_diff);

	printf MAIL ("%-35s", "Amazon Elastic Container Service for Kubernetes Total");
	printf MAIL ("%-13s", "\= \$$amazoneks_tally");
	print_diff($amazoneks_diff);

	printf MAIL ("%-35s", "Amazon Elasticsearch Service Total");
	printf MAIL ("%-13s", "\= \$$amazones_tally");
	print_diff($amazones_diff);

	printf MAIL ("%-35s", "Amazon Relational Database Service Total");
	printf MAIL ("%-13s", "\= \$$amazonrds_tally");
	print_diff($amazonrds_diff);

	printf MAIL ("%-35s", "Amazon Step Functions Service Total");
	printf MAIL ("%-13s", "\= \$$amazonstates_tally");
	print_diff($amazonstates_diff);

	printf MAIL ("%-35s", "Amazon Virtual Private Cloud Service Total");
	printf MAIL ("%-13s", "\= \$$amazonvpc_tally");
	print_diff($amazonvpc_diff);

	printf MAIL ("%-35s", "Amazon Secrets Manager Service Total");
	printf MAIL ("%-13s", "\= \$$awssecretsmanager_tally");
	print_diff($awssecretsmanager_diff);

	printf MAIL ("%-35s", "Amazon Cloud Front Total");
	printf MAIL ("%-13s", "\= \$$cloudfront_tally");
	print_diff($cloudfront_diff);

	printf MAIL ("%-35s", "Amazon Guard Duty Total");
	printf MAIL ("%-13s", "\= \$$guardduty_tally");
	print_diff($guardduty_diff);

	printf MAIL ("%-35s", "Amazon Config Service Total");
	printf MAIL ("%-13s", "\= \$$awsconfig_tally");
	print_diff($awsconfig_diff);

	printf MAIL ("%-35s", "Amazon Cost Explorer Total");
	printf MAIL ("%-13s", "\= \$$costexplorer_tally");
	print_diff($costexplorer_diff);

	printf MAIL ("%-35s", "Amazon Business Support Total");
	printf MAIL ("%-13s", "\= \$$support_bus_tally");
	print_diff($support_bus_diff);

	printf MAIL ("%-35s", "Amazon X-Ray Service Total");
	printf MAIL ("%-13s", "\= \$$xray_tally");
	print_diff($xray_diff);

	printf MAIL ("%-35s", "Amazon Glue Service Total");
	printf MAIL ("%-13s", "\= \$$awsglue_tally");
	print_diff($awsglue_diff);

	printf MAIL ("%-35s", "Unknown Services Total");
	printf MAIL ("%-13s", "\= \$$unknown_tally");
	print_diff($unknown_diff);


	print MAIL "\n";

	printf MAIL ("%-35s", "GRAND TOTAL");
	printf MAIL ("%-13s", "\= \$$sum");
	print_diff($grand_diff);
}

# Populate the aws_reporting database with today's dollar amounts

$grab = $connect->prepare("SELECT * FROM \`$k\` WHERE report_date = \"$today_mysqlformat\"");
$grab->execute() or print "\nCouldn't execute statement: " . $grab->errstr . "\n";

if ($grab->rows == 0) {
	# Data is not there yet for today, let's put it in there!

	$connect->do("INSERT INTO \`$k\`
	(report_date, data_tally, s3_tally, support_dev_tally, route53_tally, datapipeline_tally,
	awskms_tally, simpledb_tally, cloudwatch_tally, cloudtrail_tally,
	queueservice_tally, notification_tally, lambda_tally, registrar_tally,
	ec2_total, amazonapigateway_tally, amazondynamodb_tally, amazoneks_tally,
	amazones_tally, amazonrds_tally, amazonstates_tally, amazonvpc_tally,
	awssecretsmanager_tally, cloudfront_tally, guardduty_tally,
	awsconfig_tally, costexplorer_tally, support_bus_tally, xray_tally,
	awsglue_tally, unknown_tally, grand_total) VALUES
	(\"$today_mysqlformat\", \"$data_tally\", \"$s3_tally\", \"$support_dev_tally\", \"$route53_tally\",
	\"$datapipeline_tally\", \"$awskms_tally\", \"$simpledb_tally\", \"$cloudwatch_tally\",
	\"$cloudtrail_tally\", \"$queueservice_tally\", \"$notification_tally\",
	\"$lambda_tally\", \"$registrar_tally\", \"$ec2_total\",
	\"$amazonapigateway_tally\", \"$amazondynamodb_tally\", \"$amazoneks_tally\",
	\"$amazones_tally\", \"$amazonrds_tally\", \"$amazonstates_tally\",
	\"$amazonvpc_tally\", \"$awssecretsmanager_tally\", \"$cloudfront_tally\",
	\"$guardduty_tally\", \"$awsconfig_tally\", \"$costexplorer_tally\", \"$support_bus_tally\",
	\"$xray_tally\", \"$awsglue_tally\", \"$unknown_tally\", \"$sum\")");


} else {
	print MAIL "\nEither an entry for today already exists in the database,\n";
	print MAIL "or there was a problem checking for data for today in the DB\!\n";
}

$totals{$k} = $sum;

} ########## CLOSE %aws_accounts hash loop

# Add up all totals
foreach my $account (sort keys %totals) {
	$all_total += $totals{$account};
}

close(MAIL);

# Set up email

open(RECIPIENTS_LIST, '<', 'recipients') or die $!;
chomp(my @recipients = <RECIPIENTS_LIST>);
close(RECIPIENTS_LIST);
my $to = join(',', @recipients);

# TODO: Data removed
my $from = 'root@example.com';
my $subject = "AWS Report for $current_day";

open(MAIL, '<', "/tmp/mailtemp.txt");
open(MAILSEND, "|/usr/sbin/sendmail -t");

print MAILSEND "To: $to\n";
print MAILSEND "From: $from\n";
print MAILSEND "Subject: $subject\n\n";

if ($day eq "01") {
	print MAILSEND "Amazon Web Services Report for $first_day\n";
	print MAILSEND "Being the first of the month, all tallies are reset\!\n\n";
} else {
	print MAILSEND "Amazon Web Services Report from $first_day - $current_day\n\n";
}

print MAILSEND "TOTALS BY ACCOUNT:\n\n";

foreach my $account (sort keys %totals) {
	printf MAILSEND ("%-28s", $account . " ");
	printf MAILSEND ("%-15s\n", ": " . $totals{$account});
}

printf MAILSEND ("%-28s", "GRAND TOTAL ALL ACCOUNTS ");
printf MAILSEND ("%-15s\n\n", ": $all_total");

while (<MAIL>) {
	print MAILSEND "$_";
}

# START PROJECT BASED COST ACCOUNTING (for "Name" tags)

open($data_detailed, '<', $local_detailed_file_unzipped) or die "Could not open '$local_detailed_file_unzipped' $!\n";

while (my $line_detailed = <$data_detailed>) {

	if ($csv->parse($line_detailed)) {
		my @fields = $csv->fields();

		# Exclude the first couple and the last couple lines of the file

		if (($fields[0] =~ /see your/) || ($fields[0] =~ /InvoiceID/) || ($fields[0] eq "")) {
			next;
		}

		# Exclude the Invoice Cost Summary

		if ($fields[19] =~ /Total amount for invoice Estimated/) {
			next;
		}

		# Exclude line items with no or very minimal cost

		if ($fields[20] < 0.001) {
			 next;
		}

		if ($fields[23]) {

			if ($project_spending{"$fields[23]"}) {
				$project_spending{$fields[23]} += $fields[20];
			} else {
				$project_spending{$fields[23]} = $fields[20];
			}

		} else {
			next;
		}

	}
}

print MAILSEND "\n===PROJECT BASED ACCOUNTING BASED ON THE \"Name\" TAG ===\n\n";

keys %project_spending;
foreach my $k (sort keys %project_spending) {
	my $v = $project_spending{$k};
	$v = sprintf("%.2f", $v);
	printf MAILSEND ("%-28s", "$k");
	printf MAILSEND ("%-15s\n", ": \$$v");
}

close($data_detailed);

# Close email and send

close(MAIL);
close(MAILSEND);

# Clean up temporary files a bit

unlink("$local_detailed_file_unzipped");
unlink("$tmpfile");
unlink("/tmp/mailtemp.txt");
